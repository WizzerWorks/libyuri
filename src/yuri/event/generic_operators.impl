/*!
 * @file 		generic_binary_oper_impl.impl
 * @author 		Zdenek Travnicek <travnicek@iim.cz>
 * @date 		15.7.2013
 * @date		21.11.2013
 * @copyright	Institute of Intermedia, CTU in Prague, 2013
 * 				Distributed under modified BSD Licence, details in file doc/LICENSE
 *
 */
 
/* *******************************************
Generic binary operator (returning fixed type)
******************************************** */

template<template <class> class Oper, class Return>
pBasicEvent generic_binary_oper_impl(const std::string& name, const::std::vector<pBasicEvent>& /*events*/)
{
	throw bad_event_cast("Unsupported parameter types for operator "+name+"()");
}

template<template <class> class Oper, class Return, class Event0, class... Args>
pBasicEvent generic_binary_oper_impl(const std::string& name, const::std::vector<pBasicEvent>& events)
{
	typedef typename event_traits<Event0>::stored_type type;
	const event_type_t event_type = event_traits<Event0>::event_type();
	if (events[0]->get_type() == event_type) {
		Oper<type> oper;
		return std::make_shared<Return>(oper(get_value<Event0>(events[0]),get_value<Event0>(events[1])));
	}
	return generic_binary_oper_impl<Oper, Return, Args...>(name, events);
}

template<template <class> class Oper, class Return, class ... Args>
pBasicEvent generic_binary_oper(const std::string& name, const::std::vector<pBasicEvent>& events)
{
	if (events.size() != 2) throw bad_event_cast(name + "() requires two parameters");
	if (events[0]->get_type() != events[1]->get_type()) throw bad_event_cast(name + "() requires both parameters to have same type");
	return generic_binary_oper_impl<Oper, Return, Args...>(name, events);
}

/* *******************************************
Generic binary operator (returning variable type)
******************************************** */

template<template <class> class Oper>
pBasicEvent generic_binary_oper2_impl(const std::string& name, const::std::vector<pBasicEvent>& /*events*/)
{
	throw bad_event_cast("Unsupported parameter types for operator "+name+"()");
}

template<template <class> class Oper, class Event0, class... Args>
pBasicEvent generic_binary_oper2_impl(const std::string& name, const::std::vector<pBasicEvent>& events)
{
	typedef typename event_traits<Event0>::stored_type type;
	const event_type_t event_type = event_traits<Event0>::event_type();
	if (events[0]->get_type() == event_type) {
		Oper<type> oper;
		return std::make_shared<Event0>(oper(get_value<Event0>(events[0]),get_value<Event0>(events[1])));
	}
	return generic_binary_oper2_impl<Oper, Args...>(name, events);
}

template<template <class> class Oper, class ... Args>
pBasicEvent generic_binary_oper2(const std::string& name, const::std::vector<pBasicEvent>& events)
{
	if (events.size() != 2) throw bad_event_cast(name + "() requires two parameters");
	if (events[0]->get_type() != events[1]->get_type()) throw bad_event_cast(name + "() requires both parameters to have same type");
	return generic_binary_oper2_impl<Oper, Args...>(name, events);
}

/* *******************************************
Generic unary operator (returning fixed type)
******************************************** */

template<template <class> class Oper, class Return>
pBasicEvent generic_unary_oper_impl(const std::string& name, const::std::vector<pBasicEvent>& /*events*/)
{
	throw bad_event_cast("Unsupported parameter types for operator "+name+"()");
}

template<template <class> class Oper, class Return, class Event0, class... Args>
pBasicEvent generic_unary_oper_impl(const std::string& name, const::std::vector<pBasicEvent>& events)
{
	typedef typename event_traits<Event0>::stored_type type;
	const event_type_t event_type = event_traits<Event0>::event_type();
	if (events[0]->get_type() == event_type) {
		Oper<type> oper;
		return std::make_shared<Return>(oper(get_value<Event0>(events[0])));
	}
	return generic_unary_oper_impl<Oper, Return, Args...>(name, events);
}

template<template <class> class Oper, class Return, class ... Args>
pBasicEvent generic_unary_oper(const std::string& name, const::std::vector<pBasicEvent>& events)
{
	if (events.size() != 1) throw bad_event_cast(name + "() requires one parameter");
	return generic_unary_oper_impl<Oper, Return, Args...>(name, events);
}
/* *******************************************
Generic unary operator (returning varible type)
******************************************** */

template<template <class> class Oper>
pBasicEvent generic_unary_oper2_impl(const std::string& name, const::std::vector<pBasicEvent>& /*events*/)
{
	throw bad_event_cast("Unsupported parameter types for operator "+name+"()");
}

template<template <class> class Oper, class Event0, class... Args>
pBasicEvent generic_unary_oper2_impl(const std::string& name, const::std::vector<pBasicEvent>& events)
{
	typedef typename event_traits<Event0>::stored_type type;
	const event_type_t event_type = event_traits<Event0>::event_type();
	if (events[0]->get_type() == event_type) {
		Oper<type> oper;
		return std::make_shared<Event0>(oper(get_value<Event0>(events[0])));
	}
	return generic_unary_oper2_impl<Oper, Args...>(name, events);
}

template<template <class> class Oper, class ... Args>
pBasicEvent generic_unary_oper2(const std::string& name, const::std::vector<pBasicEvent>& events)
{
	if (events.size() != 1) throw bad_event_cast(name + "() requires one parameter");
	return generic_unary_oper2_impl<Oper, Args...>(name, events);
}
